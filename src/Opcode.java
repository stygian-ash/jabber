import java.util.*;

public enum Opcode {
	AALOAD("aaload", 0x32),
	AASTORE("aastore", 0x53),
	ACONST_NULL("aconst_null", 0x01),
	ALOAD("aload", 0x19, Operand.VARIABLE),
	ALOAD_0("aload_0", 0x2a),
	ALOAD_1("aload_1", 0x2b),
	ALOAD_2("aload_2", 0x2c),
	ALOAD_3("aload_3", 0x2d),
	ANEWARRAY("anewarray", 0xbd, Operand.TYPE),
	ARETURN("areturn", 0xb0),
	ARRAYLENGTH("arraylength", 0xbe),
	ASTORE("astore", 0x3a, Operand.VARIABLE),
	ASTORE_0("astore_0", 0x4b),
	ASTORE_1("astore_1", 0x4c),
	ASTORE_2("astore_2", 0x4d),
	ASTORE_3("astore_3", 0x4e),
	ATHROW("athrow", 0xbf),
	BALOAD("baload", 0x33),
	BASTORE("bastore", 0x54),
	BIPUSH("bipush", 0x10, Operand.BYTE_IMMEDIATE),
	BREAKPOINT("breakpoint", 0xca),
	CALOAD("caload", 0x34),
	CASTORE("castore", 0x55),
	CHECKCAST("checkcast", 0xc0, Operand.TYPE),
	D2F("d2f", 0x90),
	D2I("d2i", 0x8e),
	D2L("d2l", 0x8f),
	DADD("dadd", 0x63),
	DALOAD("daload", 0x31),
	DASTORE("dastore", 0x52),
	DCMPG("dcmpg", 0x98),
	DCMPL("dcmpl", 0x97),
	DCONST_0("dconst_0", 0x0e),
	DCONST_1("dconst_1", 0x0f),
	DDIV("ddiv", 0x6f),
	DLOAD("dload", 0x18, Operand.WIDE_VARIABLE),
	DLOAD_0("dload_0", 0x26),
	DLOAD_1("dload_1", 0x27),
	DLOAD_2("dload_2", 0x28),
	DLOAD_3("dload_3", 0x29),
	DMUL("dmul", 0x6b),
	DNEG("dneg", 0x77),
	DREM("drem", 0x73),
	DRETURN("dreturn", 0xaf),
	DSTORE("dstore", 0x39, Operand.WIDE_VARIABLE),
	DSTORE_0("dstore_0", 0x47),
	DSTORE_1("dstore_1", 0x48),
	DSTORE_2("dstore_2", 0x49),
	DSTORE_3("dstore_3", 0x4a),
	DSUB("dsub", 0x67),
	DUP("dup", 0x59),
	DUP_X1("dup_x1", 0x5a),
	DUP_X2("dup_x2", 0x5b),
	DUP2("dup2", 0x5c),
	DUP2_X1("dup2_x1", 0x5d),
	DUP2_X2("dup2_x2", 0x5e),
	F2D("f2d", 0x8d),
	F2I("f2i", 0x8b),
	F2L("f2l", 0x8c),
	FADD("fadd", 0x62),
	FALOAD("faload", 0x30),
	FASTORE("fastore", 0x51),
	FCMPG("fcmpg", 0x96),
	FCMPL("fcmpl", 0x95),
	FCONST_0("fconst_0", 0x0b),
	FCONST_1("fconst_1", 0x0c),
	FCONST_2("fconst_2", 0x0d),
	FDIV("fdiv", 0x6e),
	FLOAD("fload", 0x17, Operand.VARIABLE),
	FLOAD_0("fload_0", 0x22),
	FLOAD_1("fload_1", 0x23),
	FLOAD_2("fload_2", 0x24),
	FLOAD_3("fload_3", 0x25),
	FMUL("fmul", 0x6a),
	FNEG("fneg", 0x76),
	FREM("frem", 0x72),
	FRETURN("freturn", 0xae),
	FSTORE("fstore", 0x38, Operand.VARIABLE),
	FSTORE_0("fstore_0", 0x43),
	FSTORE_1("fstore_1", 0x44),
	FSTORE_2("fstore_2", 0x45),
	FSTORE_3("fstore_3", 0x46),
	FSUB("fsub", 0x66),
	GETFIELD("getfield", 0xb4, Operand.FIELD),
	GETSTATIC("getstatic", 0xb2, Operand.FIELD),
	GOTO("goto", 0xa7, Operand.BRANCH_OFFSET),
	GOTO_W("goto_w", 0xc8, Operand.WIDE_BRANCH_OFFSET),
	I2B("i2b", 0x91),
	I2C("i2c", 0x92),
	I2D("i2d", 0x87),
	I2F("i2f", 0x86),
	I2L("i2l", 0x85),
	I2S("i2s", 0x93),
	IADD("iadd", 0x60),
	IALOAD("iaload", 0x2e),
	IAND("iand", 0x7e),
	IASTORE("iastore", 0x4f),
	ICONST_M1("iconst_m1", 0x02),
	ICONST_0("iconst_0", 0x03),
	ICONST_1("iconst_1", 0x04),
	ICONST_2("iconst_2", 0x05),
	ICONST_3("iconst_3", 0x06),
	ICONST_4("iconst_4", 0x07),
	ICONST_5("iconst_5", 0x08),
	IDIV("idiv", 0x6c),
	IF_ACMPEQ("if_acmpeq", 0xa5, Operand.BRANCH_OFFSET),
	IF_ACMPNE("if_acmpne", 0xa6, Operand.BRANCH_OFFSET),
	IF_ICMPEQ("if_icmpeq", 0x9f, Operand.BRANCH_OFFSET),
	IF_ICMPNE("if_icmpne", 0xa0, Operand.BRANCH_OFFSET),
	IF_ICMPLT("if_icmplt", 0xa1, Operand.BRANCH_OFFSET),
	IF_ICMPGE("if_icmpge", 0xa2, Operand.BRANCH_OFFSET),
	IF_ICMPGT("if_icmpgt", 0xa3, Operand.BRANCH_OFFSET),
	IF_ICMPLE("if_icmple", 0xa4, Operand.BRANCH_OFFSET),
	IFEQ("ifeq", 0x99, Operand.BRANCH_OFFSET),
	IFNE("ifne", 0x9a, Operand.BRANCH_OFFSET),
	IFLT("iflt", 0x9b, Operand.BRANCH_OFFSET),
	IFGE("ifge", 0x9c, Operand.BRANCH_OFFSET),
	IFGT("ifgt", 0x9d, Operand.BRANCH_OFFSET),
	IFLE("ifle", 0x9e, Operand.BRANCH_OFFSET),
	IFNONNULL("ifnonnull", 0xc7, Operand.BRANCH_OFFSET),
	IFNULL("ifnull", 0xc6, Operand.BRANCH_OFFSET),
	IINC("iinc", 0x84, Operand.VARIABLE, Operand.BYTE_IMMEDIATE),
	ILOAD("iload", 0x15, Operand.VARIABLE),
	ILOAD_0("iload_0", 0x1a),
	ILOAD_1("iload_1", 0x1b),
	ILOAD_2("iload_2", 0x1c),
	ILOAD_3("iload_3", 0x1d),
	IMPDEP1("impdep1", 0xfe),
	IMPDEP2("impdep2", 0xff, Operand.BYTE_IMMEDIATE),
	IMUL("imul", 0x68),
	INEG("ineg", 0x74),
	INSTANCEOF("instanceof", 0xc1, Operand.TYPE),
	INVOKEDYNAMIC("invokedynamic", 0xba, Operand.DYNAMIC, Operand.ZERO_BYTE, Operand.ZERO_BYTE),
	INVOKEINTERFACE("invokeinterface", 0xb9, Operand.INTERFACEMETHODREF, Operand.COUNT, Operand.ZERO_BYTE, Operand.ZERO_BYTE),
	INVOKESPECIAL("invokespecial", 0xb7, Operand.METHODREF),
	INVOKESTATIC("invokestatic", 0xb8, Operand.METHODREF),
	INVOKEVIRTUAL("invokevirtual", 0xb6, Operand.METHODREF),
	IOR("ior", 0x80),
	IREM("irem", 0x70),
	IRETURN("ireturn", 0xac),
	ISHL("ishl", 0x78),
	ISHR("ishr", 0x7a),
	ISTORE("istore", 0x36, Operand.VARIABLE),
	ISTORE_0("istore_0", 0x3b),
	ISTORE_1("istore_1", 0x3c),
	ISTORE_2("istore_2", 0x3d),
	ISTORE_3("istore_3", 0x3e),
	ISUB("isub", 0x64),
	IUSHR("iushr", 0x7c),
	IXOR("ixor", 0x82),
	JSR("jsr", 0xa8, Operand.BRANCH_OFFSET),
	JSR_W("jsr_w", 0xc9, Operand.WIDE_BRANCH_OFFSET),
	L2D("l2d", 0x8a),
	L2F("l2f", 0x89),
	L2I("l2i", 0x88),
	LADD("ladd", 0x61),
	LALOAD("laload", 0x2f),
	LAND("land", 0x7f),
	LASTORE("lastore", 0x50),
	LCMP("lcmp", 0x94),
	LCONST_0("lconst_0", 0x09),
	LCONST_1("lconst_1", 0x0a),
	LDC("ldc", 0x12, Operand.CONSTANT_INDEX),
	LDC_W("ldc_w", 0x13, Operand.WIDE_CONSTANT_INDEX),
	LDC2_W("ldc2_w", 0x14, Operand.WIDE_CONSTANT_INDEX),
	LDIV("ldiv", 0x6d),
	LLOAD("lload", 0x16, Operand.WIDE_VARIABLE),
	LLOAD_0("lload_0", 0x1e),
	LLOAD_1("lload_1", 0x1f),
	LLOAD_2("lload_2", 0x20),
	LLOAD_3("lload_3", 0x21),
	LMUL("lmul", 0x69),
	LNEG("lneg", 0x75),
	LOOKUPSWITCH("lookupswitch", 0xab, Operand.PAD_ALIGN_4, Operand.WIDE_BRANCH_OFFSET, Operand.INT_IMMEDIATE, Operand.LOOKUPSWITCH_PAIRS),
	LOR("lor", 0x81),
	LREM("lrem", 0x71),
	LRETURN("lreturn", 0xad),
	LSHL("lshl", 0x79),
	LSHR("lshr", 0x7b),
	LSTORE("lstore", 0x37, Operand.WIDE_VARIABLE),
	LSTORE_0("lstore_0", 0x3f),
	LSTORE_1("lstore_1", 0x40),
	LSTORE_2("lstore_2", 0x41),
	LSTORE_3("lstore_3", 0x42),
	LSUB("lsub", 0x65),
	LUSHR("lushr", 0x7d),
	LXOR("lxor", 0x83),
	MONITORENTER("monitorenter", 0xc2),
	MONITOREXIT("monitorexit", 0xc3),
	MULTIANEWARRAY("multianewarray", 0xc5, Operand.TYPE, Operand.COUNT),
	NEW("new", 0xbb, Operand.TYPE),
	NEWARRAY("newarray", 0xbc, Operand.ATYPE),
	NOP("nop", 0x00),
	POP("pop", 0x57),
	POP2("pop2", 0x58),
	PUTFIELD("putfield", 0xb5, Operand.FIELD),
	PUTSTATIC("putstatic", 0xb3, Operand.FIELD),
	RET("ret", 0xa9, Operand.VARIABLE),
	RETURN("return", 0xb1),
	SALOAD("saload", 0x35),
	SASTORE("sastore", 0x56),
	SIPUSH("sipush", 0x11, Operand.SHORT_IMMEDIATE),
	SWAP("swap", 0x5f),
	TABLESWITCH("tableswitch", 0xaa, Operand.PAD_ALIGN_4, Operand.WIDE_BRANCH_OFFSET, Operand.INT_IMMEDIATE, Operand.INT_IMMEDIATE, Operand.TABLESWITCH_OFFSETS),
	WIDE("wide", 0xc4, Operand.INSTRUCTION);

	public final String mnemonic;
	public final int opcode;
	public final Operand[] operands;
	public static final Map<Integer, Opcode> opcodeLookupMap = Collections.unmodifiableMap(
			new HashMap<>(){{
				for (var opcode: Opcode.class.getEnumConstants())
					put(opcode.opcode, opcode);
			}});

	Opcode(String mnemonic, int opcode, Operand... operands) {
		this.mnemonic = mnemonic;
		this.opcode = opcode;
		this.operands = operands;
	}

	public static Opcode lookupOpcode(byte opcode) {
		return opcodeLookupMap.get(Byte.toUnsignedInt(opcode));
	}
}
